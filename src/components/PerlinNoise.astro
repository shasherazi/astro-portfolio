---

---

<canvas id="perlin-canvas" class="fixed inset-0 -z-10 w-screen h-screen"></canvas>

<script>
  const c = document.getElementById("perlin-canvas") as HTMLCanvasElement;
  const ctx = c.getContext("2d");

  if (!c || !ctx) {
    throw new Error("Canvas or context not found.");
  }

  const width = window.innerWidth;
  const height = window.innerHeight;
  c.width = width;
  c.height = height;
  const grid: any = [];
  const gridSize = 100;

  for (let x = 0; x < width / gridSize; x++) {
    grid[x] = [];

    for (let y = 0; y <= height / gridSize; y++) {
      const angle = Math.random() * 2 * Math.PI;
      grid[x][y] = {
        x: Math.cos(angle),
        y: Math.sin(angle),
      };
    }
  }

  function interpolate(a: number, b: number, x: number) {
    const ft = x * Math.PI;
    const f = (1 - Math.cos(ft)) * 0.5;
    return a * (1 - f) + b * f;
  }

  function dotProduct(x1: number, y1: number, x2: number, y2: number) {
    return x1 * x2 + y1 * y2;
  }

  function perlinNoise(x: number, y: number) {
    const x0 = Math.floor(x / gridSize);
    const y0 = Math.floor(y / gridSize);
    const x1 = Math.min(x0 + 1, Math.floor(width / gridSize));
    const y1 = Math.min(y0 + 1, Math.floor(height / gridSize));

    const s00 = dotProduct(
      grid[x0][y0]?.x ?? 0,
      grid[x0][y0]?.y ?? 0,
      x - x0 * gridSize,
      y - y0 * gridSize,
    );
    const s10 = dotProduct(
      grid[x1][y0]?.x ?? 0,
      grid[x1][y0]?.y ?? 0,
      x - x1 * gridSize,
      y - y0 * gridSize,
    );
    const s01 = dotProduct(
      grid[x0][y1]?.x ?? 0,
      grid[x0][y1]?.y ?? 0,
      x - x0 * gridSize,
      y - y1 * gridSize,
    );
    const s11 = dotProduct(
      grid[x1][y1]?.x ?? 0,
      grid[x1][y1]?.y ?? 0,
      x - x1 * gridSize,
      y - y1 * gridSize,
    );

    const ix0 = interpolate(s00, s10, x / gridSize - x0);
    const ix1 = interpolate(s01, s11, x / gridSize - x0);
    return interpolate(ix0, ix1, y / gridSize - y0);
  }

  for (let x = 0; x < width; x++) {
    for (let y = 0; y < height; y++) {
      const noiseValue = -Math.abs(perlinNoise(x, y));
      const color = Math.floor((noiseValue + 1) * 50);
      ctx.fillStyle = `rgb(${color}, ${color}, ${color})`;
      ctx.fillRect(x, y, 1, 1);
    }
  }
</script>
