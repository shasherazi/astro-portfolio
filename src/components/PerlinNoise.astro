---

---

<canvas id="perlin-canvas" class="fixed inset-0 -z-10 w-screen h-screen">
  Your browser does not support the HTML5 canvas tag.
</canvas>

<script>
  const c = document.getElementById("perlin-canvas") as HTMLCanvasElement;
  const ctx = c.getContext("2d", { alpha: false }) as CanvasRenderingContext2D;

  // Canvas setup with resize handling
  function setupCanvas() {
    const dpr = window.devicePixelRatio || 1;
    const rect = c.getBoundingClientRect();

    c.width = rect.width * dpr;
    c.height = rect.height * dpr;

    ctx.scale(dpr, dpr);
    c.style.width = `${rect.width}px`;
    c.style.height = `${rect.height}px`;

    return { width: rect.width, height: rect.height };
  }

  // Precompute constants and lookup tables
  const GRID_SIZE = 420;
  const TWO_PI = Math.PI * 2;
  const INTERPOLATION_STEPS = 1024;
  const interpolationLookup = new Float32Array(INTERPOLATION_STEPS + 1);

  for (let i = 0; i <= INTERPOLATION_STEPS; i++) {
    const t = i / INTERPOLATION_STEPS;
    const ft = t * Math.PI;
    interpolationLookup[i] = (1 - Math.cos(ft)) * 0.5;
  }

  // Optimized interpolation using lookup table
  function interpolate(a: number, b: number, x: number) {
    const index = Math.floor(x * INTERPOLATION_STEPS);
    const f = interpolationLookup[index];
    return a * (1 - f) + b * f;
  }

  // Generate gradient vectors with typed arrays
  function createGradientGrid(width: number, height: number) {
    const cols = Math.ceil(width / GRID_SIZE) + 1;
    const rows = Math.ceil(height / GRID_SIZE) + 1;
    const vectorsX = new Float32Array(cols * rows);
    const vectorsY = new Float32Array(cols * rows);

    for (let i = 0; i < cols * rows; i++) {
      const angle = Math.random() * TWO_PI;
      vectorsX[i] = Math.cos(angle);
      vectorsY[i] = Math.sin(angle);
    }

    return { vectorsX, vectorsY, cols, rows };
  }

  // Optimized Perlin noise calculation
  function calculateNoise(
    x: number,
    y: number,
    grid: { vectorsX: Float32Array; vectorsY: Float32Array; cols: number },
  ) {
    const x0 = Math.floor(x / GRID_SIZE);
    const y0 = Math.floor(y / GRID_SIZE);
    const x1 = x0 + 1;
    const y1 = y0 + 1;

    const xf = x - x0 * GRID_SIZE;
    const yf = y - y0 * GRID_SIZE;

    const getIndex = (x: number, y: number) => x + y * grid.cols;

    // Calculate dot products
    const s00 =
      xf * grid.vectorsX[getIndex(x0, y0)] +
      yf * grid.vectorsY[getIndex(x0, y0)];
    const s10 =
      (xf - GRID_SIZE) * grid.vectorsX[getIndex(x1, y0)] +
      yf * grid.vectorsY[getIndex(x1, y0)];
    const s01 =
      xf * grid.vectorsX[getIndex(x0, y1)] +
      (yf - GRID_SIZE) * grid.vectorsY[getIndex(x0, y1)];
    const s11 =
      (xf - GRID_SIZE) * grid.vectorsX[getIndex(x1, y1)] +
      (yf - GRID_SIZE) * grid.vectorsY[getIndex(x1, y1)];

    const tx = xf / GRID_SIZE;
    const ty = yf / GRID_SIZE;

    const ix0 = interpolate(s00, s10, tx);
    const ix1 = interpolate(s01, s11, tx);

    return interpolate(ix0, ix1, ty);
  }

  // Main rendering function
  function render() {
    const { width, height } = setupCanvas();
    const grid = createGradientGrid(width, height);

    // Create off-screen buffer
    const imageData = ctx.createImageData(width, height);
    const data = imageData.data;

    // Batch process pixels
    for (let i = 0; i < width * height; i++) {
      const x = i % width;
      const y = Math.floor(i / width);

      const noiseValue = -Math.abs(calculateNoise(x, y, grid));
      const color = Math.floor((noiseValue + 1) * 40);

      const index = i * 4;
      data[index] = color; // R
      data[index + 1] = color; // G
      data[index + 2] = color; // B
      data[index + 3] = 255; // A
    }

    ctx.putImageData(imageData, 0, 0);
  }

  // Initial render
  render();
</script>
